#!/usr/bin/env node

var argv = require('minimist')(process.argv.slice(2));
var async = require('async');
var tape = require('tape');
var cp = require('child_process');

if (argv.r) {
  randomized(argv.r);
} else if (argv.s) {
  runTests('state', argv);
} else if (argv.v) {
  runTests('vm', argv);
} else if(argv.t){
  runTests('transaction', argv);
} else if (argv.a) {
  runAll();
}

//randomized tests
//returns 1 if the tests fails
//returns 0 if the tests succeds
function randomized(stateTest) {
  var stateRunner = require('../test/stateRunner.js');

  tape.createStream({
    objectMode: true
  }).on('data', function(row) {
    if (row.ok === false) {
      process.stdout.write('1');
      process.exit();
    }
  }).on('end', function() {
    process.stdout.write('0');
  });

  try {
    stateTest = JSON.parse(stateTest);
  } catch (e) {
    console.error('invalid json');
    process.exit();
  }

  tape('', function(t) {
    stateRunner(stateTest, {
      t: t
    }, function() {
      t.end();
    });
  });
}

function getTests(type, argv) {
  var tests = require('ethereum-tests')[type + 'Tests'];

  if (type === 'vm') {
    for (var prop in tests.randomTest) {
      tests[prop] = tests.randomTest[prop];
    }

    delete tests.RandomTests;
    delete tests.vmSystemOperationsTest;
  }

  //for running a single file
  if (argv.file) {
    var i = {};
    i[argv.file] = tests[argv.file];

    //run a single test from a single file
    if (argv.test) {
      i[argv.file] = {};
      i[argv.file][argv.test] = tests[argv.file][argv.test];
    }

    tests = i;
  }

  return tests;
}

function runTests(type, argv, cb) {
  var tests = getTests(type, argv);
  var runner = require('../test/' + type + 'Runner');

  //run all of the tests
  async.each(Object.keys(tests), function(fileName, done) {
    var file = tests[fileName];
    async.eachSeries(Object.keys(file), function(testName, done2) {
      var test = file[testName];
      tape('[' + fileName + '] ' + testName, function(t) {
        runner(test, {
          t: t,
          vmtrace: argv.vmtrace
        }, function() {
          t.end();
          done2();
        });
      });
    }, done);
  }, cb);
}

function runAll() {
  async.series([
    function(done) {
      var f = cp.fork(__dirname + '/../test/tester.js');
      f.on('close', done);
    },
    function(done) {
      var f = cp.fork(__dirname + '/../test/browserfy.js');
      f.on('close', done);
    },
    function(done) {
      var f = cp.fork(__dirname + '/../test/transactions.js');
      f.on('close', done);
    },
    function(done) {
      var f = cp.fork(__dirname + '/../test/genesishashes.js');
      f.on('close', done);
    },
    runTests.bind(this, 'state', {}),
    runTests.bind(this, 'vm', {})
  ]);
}
